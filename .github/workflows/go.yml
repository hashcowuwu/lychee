# .github/workflows/release.yml

# 工作流名称
name: Go Release Build

# 触发工作流的事件
# 这里设置为当有新的 tag (例如 v1.0.0) 被推送到仓库时触发
on:
  push:
    tags:
      - 'v*' # 匹配所有以 'v' 开头的 tag

# 定义工作流中的任务
jobs:
  build-and-release:
    # 任务名称
    name: Build and Release
    # 运行此任务的虚拟机环境
    runs-on: ubuntu-latest
    
    # 任务中的步骤
    steps:
      # 第一步：检出代码
      # 使用官方的 checkout action 来获取你的仓库代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 第二步：设置 Go 环境
      # 使用官方的 setup-go action 来配置 Go 运行环境
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5' # 你可以修改为你项目使用的 Go 版本

      # 新增步骤：安装 systemd 开发库
      # 因为 go-systemd 依赖 CGO 和 systemd 的头文件
      - name: Install systemd dependencies
        run: sudo apt-get update && sudo apt-get install -y libsystemd-dev

      # 第四步：构建 Go 应用
      # 移除了 CGO_ENABLED: 0 因为依赖项需要 CGo
      # GOOS 和 GOARCH 不是必需的，因为我们是在 Linux runner 上构建 Linux 二进制文件，但保留它们也无妨
      - name: Build for Linux
        run: |
          echo "Building for Linux..."
          go build -o lychee ./cmd/app/main.go

      # 第五步：创建 Release 并上传构建产物
      # 使用 ncipollo/release-action 这个流行的 action 来自动创建 Release
      # 并将我们上一步构建出的 'lychee' 文件作为附件上传
      - name: Create Release and Upload Asset
        uses: ncipollo/release-action@v1
        with:
          # 要上传的构建产物文件列表，这里是我们的二进制文件
          artifacts: "lychee"
          # GitHub 会自动提供 GITHUB_TOKEN，用于授权 action 创建 Release
          token: ${{ secrets.GITHUB_TOKEN }}
          # 允许 action 覆盖已经存在的 release assets
          allowUpdates: true
